# Âø´ÈÄüÂºÄÂèë‰∏Ä‰∏™poiÊ£ÄÁ¥¢ÂàÜÊûêÂú∞ÂõæÂ∑•ÂÖ∑
# streamlit run hippo-map-tool.py --server.port 8051 --server.runOnSave True --server.maxUploadSize 1024  --runner.magicEnabled True
import json
import os
import time
from io import BytesIO

import dask.dataframe as dd
import pandas as pd
import streamlit as st
from dask.diagnostics import ProgressBar
from loguru import logger
from streamlit_folium import folium_static

from folium_utils import (add_circle, add_city, add_heat_map, add_plugins,
                          add_poi, add_pois, add_tiles, get_map, get_zoom_evel)
from gaode_api import gaode_poi_info
from poi import check_distance, get_poi_by_id, normalize_poi_info, parse_query

st.set_page_config(
    page_title="Êµ∑È©¨Âú∞ÂõæÂ∑•ÂÖ∑",
    page_icon="üåè",  # üåêüåéüåçüåè
    layout="wide",
    initial_sidebar_state="expanded",
)
st.set_option('deprecation.showfileUploaderEncoding', False)

st.sidebar.header("Êµ∑È©¨Âú∞ÂõæÂ∑•ÂÖ∑")
height = st.sidebar.slider('È´òÂ∫¶', 0, 1080, 815, 5)
width = st.sidebar.slider('ÂÆΩÂ∫¶', 0, 2196, 1475, 5)

context = {
    "map": None
}

page_list = ["Ê£ÄÁ¥¢", "ÁÉ≠ÂäõÂõæ"]
page = st.sidebar.selectbox("ÈÄâÊã©ÂäüËÉΩ", page_list)
if page in ["Ê£ÄÁ¥¢"]:
    env_list = ["ÁôæÂ∫¶", "È´òÂæ∑"]
    envs = st.sidebar.multiselect("ÈÄâÊã©ÁéØÂ¢É", env_list, ["È´òÂæ∑"])
    context.update({
        "map_pois": {env: [] for env in envs},
        "plng": 0,
        "plat": 0,
        "max_radius": 0
    })

text_input = None
search = None
heat_file = None
if page == "Ê£ÄÁ¥¢":
    text_input = st.sidebar.text_area("ÊîØÊåÅIDÊü•ËØ¢ÔºåpoiÊ£ÄÁ¥¢ÔºåÂùêÊ†áÊâìÁÇπ",
                                      '''B0FFF5QFGK Âåó‰∫¨Â∏Ç kfc 116.190306,39.295219 13900000000''')
    search = st.sidebar.button("search")


elif page == "ÁÉ≠ÂäõÂõæ":
    heat_file = st.sidebar.file_uploader(
        "Êñá‰ª∂Ê†ºÂºè lat lng heat [radius]",
        type=["json", "jsonl", "txt", "csv", "tsv"],
        encoding="utf-8")

if heat_file:
    f_type = heat_file.type
    if f_type.startswith("text"):
        df = pd.read_csv(heat_file,
                         names=["lat", "lng", "heat", "radius"],
                         sep={
                             "text/plain": " ",
                             "text/csv": ",",
                             "text/tab-separated-values": "\t"
                         }.get(f_type))
    elif f_type.startswith("application"):
        # application/json
        # application/octet-stream
        df = pd.read_json(heat_file,
                          lines=True if f_type == "application/octet-stream" else False)
    # adcode: "100000"
    # citycode: "total"
    # label: "ÂÖ®ÂõΩ"
    # name: "ÂÖ®ÂõΩ"
    # spell: ""
    # x: "116.3683244"
    # y: "39.915085"
    radius = st.sidebar.slider('radius', 0, 50, 5)
    blur = st.sidebar.slider('blur', 0, 50, 5)
    context["map"] = get_map([39.915085, 116.3683244])
    context["map"].options.update({"zoom": 4})
    heat_data = []
    # TODO city -> lng lat
    # ÂüéÂ∏ÇÂêçÊ®°Á≥äÂåπÈÖç
    for ix, row in df.iterrows():
        add_city(context["map"], row.to_dict())
        add_circle(context["map"], (row.lat, row.lng), row.radius*1000)
    add_heat_map(context["map"],
                 df[["lat", "lng", "heat"]].to_numpy(),
                 "ÁÉ≠ÂäõÂõæ",
                 radius=radius,
                 blur=blur)


def check_loc(context, lng, lat):
    if not context["map"]:
        context["map"] = get_map([lat, lng])
        context["plat"], context["plng"] = lat, lng
        add_poi(context["map"], {
                "index": "@",
                "lng": lng,
                "lat": lat,
                "displayname": "ÂÆö‰ΩçÁÇπ"
                })


def add_points(lng_lat_list):
    """
    ÂùêÊ†áÊâìÁÇπ
    """
    pois = []
    for ix, lng_lat in enumerate(lng_lat_list):
        lng, lat = lng_lat.split(",")
        pois.append({
            "index": "@",
            "lng": lng,
            "lat": lat,
            "displayname": str(ix)
        })
    check_distance(lng, lat, pois)
    update_pois(context, "ÂùêÊ†áÊâìÁÇπ", pois)


def update_pois(context, env, pois):
    for index, poi_info in enumerate(pois):
        if poi_info:
            check_loc(context, poi_info["lng"], poi_info["lat"])
            context["max_radius"] = max(
                context["max_radius"], poi_info["distance_meters"])
            context["map_pois"][env].append(poi_info)


if search:
    query = parse_query(text_input)
    logger.info(f"text_input: {text_input}")
    logger.info(f"query: {query}")
    if query["lng"]:
        check_loc(context, query["lng"], query["lat"])
        if len(query["lng_lat"]) > 1:
            context["map_pois"].update({
                "ÂùêÊ†áÊâìÁÇπ": []
            })
            add_points(query["lng_lat"][1:])
        for env in envs:
            if env == "ÁôæÂ∫¶":
                pass
            elif env == "È´òÂæ∑":
                uri, pois = gaode_poi_info(query["keyword"])
            st.sidebar.markdown(f"""
            [{env}]({uri})
            """)
            _ = [normalize_poi_info(poi) for poi in pois]
            check_distance(query["lng"], query["lat"], pois)
            update_pois(context, env, pois)

    if query["poi_ids"]:
        env = "didi_poi"
        context["map_pois"].update({
            env: []
        })
        pois = [get_poi_by_id(poi_id) for poi_id in query["poi_ids"]]
        pois = [poi for poi in pois if poi]
        if not context["map"]:
            lng, lat = pois[0]["lng"], pois[0]["lng"]
        else:
            lng, lat = context["plng"], context["plat"]
        check_distance(lng, lat, pois)
        update_pois(context, env, pois)

    sidebar_json = {}
    sidebar_json.update({
        "Ê£ÄÁ¥¢ÁªìÊûú": context["map_pois"]
    })
    st.sidebar.json(sidebar_json)
    add_pois(context["map"], context["map_pois"])
    context["map"].options.update(
        {"zoom": get_zoom_evel(context["max_radius"])})
    add_circle(context["map"], [query["lat"], query["lng"]],
               context["max_radius"])

if context["map"]:
    add_tiles(context["map"])
    add_plugins(context["map"])
    # call to render Folium map in Streamlit
    folium_static(context["map"], width, height)
